name: Bygg og deploy dev
on:
  push:
    branches:
      - '*'
      - '!master'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  bygg:
    name: Bygg branch og publiserer docker image
    runs-on: ubuntu-latest
    steps:
      - run: echo "REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')" >> $GITHUB_ENV
      - run: echo "IMAGE_BASE=$(echo docker.pkg.github.com/$GITHUB_REPOSITORY/$REPOSITORY_NAME)" >> $GITHUB_ENV
      - run: echo "IMAGE=$(echo $IMAGE_BASE:${{ github.sha }})" >> $GITHUB_ENV

      - name: Sjekk ut kode
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Oppsett Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Gjenopprett Maven-cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Bygg og test med Maven
        run: mvn package -B -Dsurefire.useFile=false

      - name: Sjekk om branch er oppdatert mot master
        id: sjekk-mot-master
        run: |
          git fetch origin master
          echo ::set-output name=oppdatert::$(git merge-base --is-ancestor origin/master $GITHUB_SHA && echo ja || echo nei)

      - name: Sett variable
        if: steps.sjekk-mot-master.outputs.oppdatert == 'ja'
        id: variable
        run: |
          echo ::set-output name=branch::"$(echo ${GITHUB_REF#refs/heads/})"

      - name: Bygg, tag og push Docker-image
        if: steps.sjekk-mot-master.outputs.oppdatert == 'ja'
        run: |
          docker build --tag $IMAGE_BASE:$GITHUB_SHA .
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_REPOSITORY --password-stdin
          docker push $IMAGE_BASE

  deploy-labs:
    name: Deploy til labs
    runs-on: ubuntu-latest
    needs: bygg
    steps:
      - run: echo "REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')" >> $GITHUB_ENV
      - run: echo "IMAGE_BASE=$(echo docker.pkg.github.com/$GITHUB_REPOSITORY/$REPOSITORY_NAME)" >> $GITHUB_ENV
      - run: echo "IMAGE=$(echo $IMAGE_BASE:${{ github.sha }})" >> $GITHUB_ENV

      - name: Sjekk ut kode
        uses: actions/checkout@v2

      - name: Generer tiltak-refusjon-api-wiremock configmap
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          ./kubectl create configmap --dry-run=client -o yaml --from-file src/test/resources/mappings -n arbeidsgiver tiltak-refusjon-api-wiremock > .nais/wiremock-mappings.yaml
          cat .nais/wiremock-mappings.yaml # debug

      - name: Deploy til labs
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: labs-gcp
          RESOURCE: .nais/nais.yml,.nais/wiremock.yml,.nais/wiremock-mappings.yaml
          PRINT_PAYLOAD: true
          VAR: deploytrigger=${{ github.run_number }},namespace=arbeidsgiver,labs=true,kafka-pool=nav-dev
          VARS: .nais/labs.yml

